//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.13.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace Rider.Plugins.PluginTemplate.Model
{
  
  
  /// <summary>
  /// <p>Generated from: RdSampleModel.kt:11</p>
  /// </summary>
  public class RdSampleModel : RdExtBase
  {
    //fields
    //public fields
    
    /// <summary>
    /// This is an example protocol call.
    /// </summary>
    [NotNull] public IRdEndpoint<RdCallRequest, RdCallResponse> MyCall => _MyCall;
    
    //private fields
    [NotNull] private readonly RdCall<RdCallRequest, RdCallResponse> _MyCall;
    
    //primary constructor
    private RdSampleModel(
      [NotNull] RdCall<RdCallRequest, RdCallResponse> myCall
    )
    {
      if (myCall == null) throw new ArgumentNullException("myCall");
      
      _MyCall = myCall;
      BindableChildren.Add(new KeyValuePair<string, object>("myCall", _MyCall));
    }
    //secondary constructor
    internal RdSampleModel (
    ) : this (
      new RdCall<RdCallRequest, RdCallResponse>(RdCallRequest.Read, RdCallRequest.Write, RdCallResponse.Read, RdCallResponse.Write)
    ) {}
    //deconstruct trait
    //statics
    
    
    
    protected override long SerializationHash => -3003694560678971247L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      
      serializers.RegisterToplevelOnce(typeof(JetBrains.Rider.Model.IdeRoot), JetBrains.Rider.Model.IdeRoot.RegisterDeclaredTypesSerializers);
    }
    
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("RdSampleModel (");
      using (printer.IndentCookie()) {
        printer.Print("myCall = "); _MyCall.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  public static class SolutionRdSampleModelEx
   {
    public static RdSampleModel GetRdSampleModel(this JetBrains.Rider.Model.Solution solution)
    {
      return solution.GetOrCreateExtension("rdSampleModel", () => new RdSampleModel());
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdSampleModel.kt:12</p>
  /// </summary>
  public sealed class RdCallRequest : IPrintable, IEquatable<RdCallRequest>
  {
    //fields
    //public fields
    [NotNull] public string MyField {get; private set;}
    
    //private fields
    //primary constructor
    public RdCallRequest(
      [NotNull] string myField
    )
    {
      if (myField == null) throw new ArgumentNullException("myField");
      
      MyField = myField;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string myField)
    {
      myField = MyField;
    }
    //statics
    
    public static CtxReadDelegate<RdCallRequest> Read = (ctx, reader) => 
    {
      var myField = reader.ReadString();
      var _result = new RdCallRequest(myField);
      return _result;
    };
    
    public static CtxWriteDelegate<RdCallRequest> Write = (ctx, writer, value) => 
    {
      writer.Write(value.MyField);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdCallRequest) obj);
    }
    public bool Equals(RdCallRequest other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return MyField == other.MyField;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + MyField.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdCallRequest (");
      using (printer.IndentCookie()) {
        printer.Print("myField = "); MyField.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdSampleModel.kt:16</p>
  /// </summary>
  public sealed class RdCallResponse : IPrintable, IEquatable<RdCallResponse>
  {
    //fields
    //public fields
    public int MyResult {get; private set;}
    
    //private fields
    //primary constructor
    public RdCallResponse(
      int myResult
    )
    {
      MyResult = myResult;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct(out int myResult)
    {
      myResult = MyResult;
    }
    //statics
    
    public static CtxReadDelegate<RdCallResponse> Read = (ctx, reader) => 
    {
      var myResult = reader.ReadInt();
      var _result = new RdCallResponse(myResult);
      return _result;
    };
    
    public static CtxWriteDelegate<RdCallResponse> Write = (ctx, writer, value) => 
    {
      writer.Write(value.MyResult);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdCallResponse) obj);
    }
    public bool Equals(RdCallResponse other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return MyResult == other.MyResult;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + MyResult.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdCallResponse (");
      using (printer.IndentCookie()) {
        printer.Print("myResult = "); MyResult.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
